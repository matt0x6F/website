/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminCommentList,
  AdminCommentUpdate,
  PagedAdminCommentList,
} from '../models/index';
import {
    AdminCommentListFromJSON,
    AdminCommentListToJSON,
    AdminCommentUpdateFromJSON,
    AdminCommentUpdateToJSON,
    PagedAdminCommentListFromJSON,
    PagedAdminCommentListToJSON,
} from '../models/index';

export interface ApiModGetCommentRequest {
    id: number;
}

export interface ApiModQueueListRequest {
    reviewed?: boolean | null;
    limit?: number;
    offset?: number;
}

export interface ApiModUpdateCommentRequest {
    id: number;
    adminCommentUpdate: AdminCommentUpdate;
}

/**
 * 
 */
export class ModerationApi extends runtime.BaseAPI {

    /**
     * Gets all the details of a comment for moderation.
     * Mod Get Comment
     */
    async apiModGetCommentRaw(requestParameters: ApiModGetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminCommentList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiModGetComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments/moderation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminCommentListFromJSON(jsonValue));
    }

    /**
     * Gets all the details of a comment for moderation.
     * Mod Get Comment
     */
    async apiModGetComment(requestParameters: ApiModGetCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminCommentList> {
        const response = await this.apiModGetCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mod Queue List
     */
    async apiModQueueListRaw(requestParameters: ApiModQueueListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAdminCommentList>> {
        const queryParameters: any = {};

        if (requestParameters['reviewed'] != null) {
            queryParameters['reviewed'] = requestParameters['reviewed'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments/moderation/queue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAdminCommentListFromJSON(jsonValue));
    }

    /**
     * Mod Queue List
     */
    async apiModQueueList(requestParameters: ApiModQueueListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAdminCommentList> {
        const response = await this.apiModQueueListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Mod Update Comment
     */
    async apiModUpdateCommentRaw(requestParameters: ApiModUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminCommentList>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiModUpdateComment().'
            );
        }

        if (requestParameters['adminCommentUpdate'] == null) {
            throw new runtime.RequiredError(
                'adminCommentUpdate',
                'Required parameter "adminCommentUpdate" was null or undefined when calling apiModUpdateComment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/comments/moderation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdminCommentUpdateToJSON(requestParameters['adminCommentUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminCommentListFromJSON(jsonValue));
    }

    /**
     * Mod Update Comment
     */
    async apiModUpdateComment(requestParameters: ApiModUpdateCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminCommentList> {
        const response = await this.apiModUpdateCommentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
