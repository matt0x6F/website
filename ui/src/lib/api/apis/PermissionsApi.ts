/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthError,
  PagedPermission,
  Permission,
  PermissionMutate,
} from '../models/index';
import {
    AuthErrorFromJSON,
    AuthErrorToJSON,
    PagedPermissionFromJSON,
    PagedPermissionToJSON,
    PermissionFromJSON,
    PermissionToJSON,
    PermissionMutateFromJSON,
    PermissionMutateToJSON,
} from '../models/index';

export interface AccountsGroupsCreatePermissionRequest {
    permissionMutate: PermissionMutate;
}

export interface AccountsGroupsListPermissionsRequest {
    limit?: number;
    offset?: number;
}

export interface AccountsGroupsUpdatePermissionRequest {
    permissionId: number;
    permissionMutate: PermissionMutate;
}

/**
 * 
 */
export class PermissionsApi extends runtime.BaseAPI {

    /**
     * Creates a new permission
     * Create Permission
     */
    async accountsGroupsCreatePermissionRaw(requestParameters: AccountsGroupsCreatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['permissionMutate'] == null) {
            throw new runtime.RequiredError(
                'permissionMutate',
                'Required parameter "permissionMutate" was null or undefined when calling accountsGroupsCreatePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/permissions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionMutateToJSON(requestParameters['permissionMutate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Creates a new permission
     * Create Permission
     */
    async accountsGroupsCreatePermission(requestParameters: AccountsGroupsCreatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.accountsGroupsCreatePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all permissions
     * List Permissions
     */
    async accountsGroupsListPermissionsRaw(requestParameters: AccountsGroupsListPermissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPermission>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/permissions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPermissionFromJSON(jsonValue));
    }

    /**
     * Returns a list of all permissions
     * List Permissions
     */
    async accountsGroupsListPermissions(requestParameters: AccountsGroupsListPermissionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPermission> {
        const response = await this.accountsGroupsListPermissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a permission
     * Update Permission
     */
    async accountsGroupsUpdatePermissionRaw(requestParameters: AccountsGroupsUpdatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Permission>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling accountsGroupsUpdatePermission().'
            );
        }

        if (requestParameters['permissionMutate'] == null) {
            throw new runtime.RequiredError(
                'permissionMutate',
                'Required parameter "permissionMutate" was null or undefined when calling accountsGroupsUpdatePermission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/permissions/{permission_id}`.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PermissionMutateToJSON(requestParameters['permissionMutate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionFromJSON(jsonValue));
    }

    /**
     * Updates a permission
     * Update Permission
     */
    async accountsGroupsUpdatePermission(requestParameters: AccountsGroupsUpdatePermissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Permission> {
        const response = await this.accountsGroupsUpdatePermissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
