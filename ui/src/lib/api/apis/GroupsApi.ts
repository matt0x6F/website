/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthError,
  Group,
  GroupMutate,
  PagedGroup,
} from '../models/index';
import {
    AuthErrorFromJSON,
    AuthErrorToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupMutateFromJSON,
    GroupMutateToJSON,
    PagedGroupFromJSON,
    PagedGroupToJSON,
} from '../models/index';

export interface AccountsGroupsCreateGroupRequest {
    groupMutate: GroupMutate;
}

export interface AccountsGroupsDeleteGroupRequest {
    groupId: number;
}

export interface AccountsGroupsListGroupsRequest {
    limit?: number;
    offset?: number;
}

export interface AccountsGroupsUpdateGroupRequest {
    groupId: number;
    groupMutate: GroupMutate;
}

/**
 * 
 */
export class GroupsApi extends runtime.BaseAPI {

    /**
     * Creates a new group
     * Create Group
     */
    async accountsGroupsCreateGroupRaw(requestParameters: AccountsGroupsCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupMutate'] == null) {
            throw new runtime.RequiredError(
                'groupMutate',
                'Required parameter "groupMutate" was null or undefined when calling accountsGroupsCreateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/groups/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupMutateToJSON(requestParameters['groupMutate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Creates a new group
     * Create Group
     */
    async accountsGroupsCreateGroup(requestParameters: AccountsGroupsCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.accountsGroupsCreateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a group
     * Delete Group
     */
    async accountsGroupsDeleteGroupRaw(requestParameters: AccountsGroupsDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling accountsGroupsDeleteGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/groups/{group_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a group
     * Delete Group
     */
    async accountsGroupsDeleteGroup(requestParameters: AccountsGroupsDeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountsGroupsDeleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of all groups
     * List Groups
     */
    async accountsGroupsListGroupsRaw(requestParameters: AccountsGroupsListGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedGroup>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/groups/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedGroupFromJSON(jsonValue));
    }

    /**
     * Returns a list of all groups
     * List Groups
     */
    async accountsGroupsListGroups(requestParameters: AccountsGroupsListGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedGroup> {
        const response = await this.accountsGroupsListGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a group
     * Update Group
     */
    async accountsGroupsUpdateGroupRaw(requestParameters: AccountsGroupsUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters['groupId'] == null) {
            throw new runtime.RequiredError(
                'groupId',
                'Required parameter "groupId" was null or undefined when calling accountsGroupsUpdateGroup().'
            );
        }

        if (requestParameters['groupMutate'] == null) {
            throw new runtime.RequiredError(
                'groupMutate',
                'Required parameter "groupMutate" was null or undefined when calling accountsGroupsUpdateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/groups/{group_id}`.replace(`{${"group_id"}}`, encodeURIComponent(String(requestParameters['groupId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupMutateToJSON(requestParameters['groupMutate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * Updates a group
     * Update Group
     */
    async accountsGroupsUpdateGroup(requestParameters: AccountsGroupsUpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Group> {
        const response = await this.accountsGroupsUpdateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
