/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ShareCodeCreate,
  ShareCodeSchema,
} from '../models/index';
import {
    ShareCodeCreateFromJSON,
    ShareCodeCreateToJSON,
    ShareCodeSchemaFromJSON,
    ShareCodeSchemaToJSON,
} from '../models/index';

export interface ApiCreateSharecodeRequest {
    postId: number;
    shareCodeCreate: ShareCodeCreate;
}

export interface ApiDeleteSharecodeRequest {
    postId: number;
    code: string;
}

export interface ApiListSharecodesRequest {
    postId: number;
}

/**
 * 
 */
export class SharecodesApi extends runtime.BaseAPI {

    /**
     * Create Sharecode
     */
    async apiCreateSharecodeRaw(requestParameters: ApiCreateSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareCodeSchema>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiCreateSharecode().'
            );
        }

        if (requestParameters['shareCodeCreate'] == null) {
            throw new runtime.RequiredError(
                'shareCodeCreate',
                'Required parameter "shareCodeCreate" was null or undefined when calling apiCreateSharecode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/sharecodes`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareCodeCreateToJSON(requestParameters['shareCodeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareCodeSchemaFromJSON(jsonValue));
    }

    /**
     * Create Sharecode
     */
    async apiCreateSharecode(requestParameters: ApiCreateSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareCodeSchema> {
        const response = await this.apiCreateSharecodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Sharecode
     */
    async apiDeleteSharecodeRaw(requestParameters: ApiDeleteSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiDeleteSharecode().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling apiDeleteSharecode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/sharecodes/{code}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sharecode
     */
    async apiDeleteSharecode(requestParameters: ApiDeleteSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDeleteSharecodeRaw(requestParameters, initOverrides);
    }

    /**
     * List Sharecodes
     */
    async apiListSharecodesRaw(requestParameters: ApiListSharecodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareCodeSchema>>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiListSharecodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/sharecodes`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareCodeSchemaFromJSON));
    }

    /**
     * List Sharecodes
     */
    async apiListSharecodes(requestParameters: ApiListSharecodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareCodeSchema>> {
        const response = await this.apiListSharecodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
