/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileDetails,
  PagedPostListPublic,
  PostCreate,
  PostPublic,
  PostUpdate,
  ValidationErrorResponse,
} from '../models/index';
import {
    FileDetailsFromJSON,
    FileDetailsToJSON,
    PagedPostListPublicFromJSON,
    PagedPostListPublicToJSON,
    PostCreateFromJSON,
    PostCreateToJSON,
    PostPublicFromJSON,
    PostPublicToJSON,
    PostUpdateFromJSON,
    PostUpdateToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface ApiCreatePostRequest {
    postCreate: PostCreate;
}

export interface ApiDeletePostRequest {
    postId: number;
}

export interface ApiGetPostByIdRequest {
    postId: number;
}

export interface ApiGetPostBySlugAndYearRequest {
    year: number;
    slug: string;
    draft?: boolean;
}

export interface ApiGetPostFilesByIdRequest {
    postId: number;
}

export interface ApiListPostsRequest {
    seriesSlug?: string | null;
    authorId?: number | null;
    drafts?: boolean;
    allPosts?: boolean;
    page?: number;
}

export interface ApiUpdatePostRequest {
    postId: number;
    postUpdate: PostUpdate;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Create a new blog post. If slug is not provided, it will be generated from the title. `series_id` can be provided to associate the post with a series.
     * Create Post
     */
    async apiCreatePostRaw(requestParameters: ApiCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['postCreate'] == null) {
            throw new runtime.RequiredError(
                'postCreate',
                'Required parameter "postCreate" was null or undefined when calling apiCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreateToJSON(requestParameters['postCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Create a new blog post. If slug is not provided, it will be generated from the title. `series_id` can be provided to associate the post with a series.
     * Create Post
     */
    async apiCreatePost(requestParameters: ApiCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.apiCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Post
     */
    async apiDeletePostRaw(requestParameters: ApiDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Post
     */
    async apiDeletePost(requestParameters: ApiDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Get Post By Id
     */
    async apiGetPostByIdRaw(requestParameters: ApiGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiGetPostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Get Post By Id
     */
    async apiGetPostById(requestParameters: ApiGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.apiGetPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Post By Slug And Year
     */
    async apiGetPostBySlugAndYearRaw(requestParameters: ApiGetPostBySlugAndYearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling apiGetPostBySlugAndYear().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling apiGetPostBySlugAndYear().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['draft'] != null) {
            queryParameters['draft'] = requestParameters['draft'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/slug/{year}/{slug}`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters['year']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Get Post By Slug And Year
     */
    async apiGetPostBySlugAndYear(requestParameters: ApiGetPostBySlugAndYearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.apiGetPostBySlugAndYearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Post Files By Id
     */
    async apiGetPostFilesByIdRaw(requestParameters: ApiGetPostFilesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileDetails>>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiGetPostFilesById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/files`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileDetailsFromJSON));
    }

    /**
     * Get Post Files By Id
     */
    async apiGetPostFilesById(requestParameters: ApiGetPostFilesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileDetails>> {
        const response = await this.apiGetPostFilesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Posts
     */
    async apiListPostsRaw(requestParameters: ApiListPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPostListPublic>> {
        const queryParameters: any = {};

        if (requestParameters['seriesSlug'] != null) {
            queryParameters['series_slug'] = requestParameters['seriesSlug'];
        }

        if (requestParameters['authorId'] != null) {
            queryParameters['author_id'] = requestParameters['authorId'];
        }

        if (requestParameters['drafts'] != null) {
            queryParameters['drafts'] = requestParameters['drafts'];
        }

        if (requestParameters['allPosts'] != null) {
            queryParameters['all_posts'] = requestParameters['allPosts'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPostListPublicFromJSON(jsonValue));
    }

    /**
     * List Posts
     */
    async apiListPosts(requestParameters: ApiListPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPostListPublic> {
        const response = await this.apiListPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing blog post. All fields in payload are optional. `series_id` can be provided or set to `null` to disassociate from a series.
     * Update Post
     */
    async apiUpdatePostRaw(requestParameters: ApiUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling apiUpdatePost().'
            );
        }

        if (requestParameters['postUpdate'] == null) {
            throw new runtime.RequiredError(
                'postUpdate',
                'Required parameter "postUpdate" was null or undefined when calling apiUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdateToJSON(requestParameters['postUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Update an existing blog post. All fields in payload are optional. `series_id` can be provided or set to `null` to disassociate from a series.
     * Update Post
     */
    async apiUpdatePost(requestParameters: ApiUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.apiUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
