/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedPostDetails,
  PostDetails,
  PostMutate,
  ValidationErrorResponse,
} from '../models/index';
import {
    PagedPostDetailsFromJSON,
    PagedPostDetailsToJSON,
    PostDetailsFromJSON,
    PostDetailsToJSON,
    PostMutateFromJSON,
    PostMutateToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface BlogApiCreatePostRequest {
    postMutate: PostMutate;
}

export interface BlogApiDeletePostRequest {
    id: number;
}

export interface BlogApiGetPostByIdRequest {
    id: number;
}

export interface BlogApiGetPostBySlugRequest {
    slug: string;
    year?: number;
    draft?: boolean;
}

export interface BlogApiListPostsRequest {
    all?: boolean;
    drafts?: boolean;
    limit?: number;
    offset?: number;
}

export interface BlogApiUpdatePostRequest {
    id: number;
    postMutate: PostMutate;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Create Post
     */
    async blogApiCreatePostRaw(requestParameters: BlogApiCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDetails>> {
        if (requestParameters['postMutate'] == null) {
            throw new runtime.RequiredError(
                'postMutate',
                'Required parameter "postMutate" was null or undefined when calling blogApiCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMutateToJSON(requestParameters['postMutate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDetailsFromJSON(jsonValue));
    }

    /**
     * Create Post
     */
    async blogApiCreatePost(requestParameters: BlogApiCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDetails> {
        const response = await this.blogApiCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Post
     */
    async blogApiDeletePostRaw(requestParameters: BlogApiDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blogApiDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Post
     */
    async blogApiDeletePost(requestParameters: BlogApiDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.blogApiDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Get Post By Id
     */
    async blogApiGetPostByIdRaw(requestParameters: BlogApiGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blogApiGetPostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDetailsFromJSON(jsonValue));
    }

    /**
     * Get Post By Id
     */
    async blogApiGetPostById(requestParameters: BlogApiGetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDetails> {
        const response = await this.blogApiGetPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Post By Slug
     */
    async blogApiGetPostBySlugRaw(requestParameters: BlogApiGetPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDetails>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling blogApiGetPostBySlug().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['draft'] != null) {
            queryParameters['draft'] = requestParameters['draft'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/slug/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDetailsFromJSON(jsonValue));
    }

    /**
     * Get Post By Slug
     */
    async blogApiGetPostBySlug(requestParameters: BlogApiGetPostBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDetails> {
        const response = await this.blogApiGetPostBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Posts
     */
    async blogApiListPostsRaw(requestParameters: BlogApiListPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPostDetails>> {
        const queryParameters: any = {};

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        if (requestParameters['drafts'] != null) {
            queryParameters['drafts'] = requestParameters['drafts'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPostDetailsFromJSON(jsonValue));
    }

    /**
     * List Posts
     */
    async blogApiListPosts(requestParameters: BlogApiListPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPostDetails> {
        const response = await this.blogApiListPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Post
     */
    async blogApiUpdatePostRaw(requestParameters: BlogApiUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling blogApiUpdatePost().'
            );
        }

        if (requestParameters['postMutate'] == null) {
            throw new runtime.RequiredError(
                'postMutate',
                'Required parameter "postMutate" was null or undefined when calling blogApiUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostMutateToJSON(requestParameters['postMutate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDetailsFromJSON(jsonValue));
    }

    /**
     * Update Post
     */
    async blogApiUpdatePost(requestParameters: BlogApiUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDetails> {
        const response = await this.blogApiUpdatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
