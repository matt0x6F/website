/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileDetails,
  PagedPostListPublic,
  PostCreate,
  PostPublic,
  PostUpdate,
  ShareCodeCreate,
  ShareCodeSchema,
  ValidationErrorResponse,
} from '../models/index';
import {
    FileDetailsFromJSON,
    FileDetailsToJSON,
    PagedPostListPublicFromJSON,
    PagedPostListPublicToJSON,
    PostCreateFromJSON,
    PostCreateToJSON,
    PostPublicFromJSON,
    PostPublicToJSON,
    PostUpdateFromJSON,
    PostUpdateToJSON,
    ShareCodeCreateFromJSON,
    ShareCodeCreateToJSON,
    ShareCodeSchemaFromJSON,
    ShareCodeSchemaToJSON,
    ValidationErrorResponseFromJSON,
    ValidationErrorResponseToJSON,
} from '../models/index';

export interface CreatePostRequest {
    postCreate: PostCreate;
}

export interface CreateSharecodeRequest {
    postId: number;
    shareCodeCreate: ShareCodeCreate;
}

export interface DeletePostRequest {
    postId: number;
}

export interface DeleteSharecodeRequest {
    postId: number;
    code: string;
}

export interface GetPostByIdRequest {
    postId: number;
}

export interface GetPostBySlugAndYearRequest {
    year: number;
    slug: string;
    draft?: boolean;
    sharecode?: string;
}

export interface GetPostFilesByIdRequest {
    postId: number;
}

export interface ListPostsRequest {
    seriesSlug?: string | null;
    authorId?: number | null;
    drafts?: boolean;
    allPosts?: boolean;
    order?: string;
    limit?: number;
    offset?: number;
}

export interface ListSharecodesRequest {
    postId: number;
}

export interface UpdatePostRequest {
    postId: number;
    postUpdate: PostUpdate;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Create a new blog post. If slug is not provided, it will be generated from the title. `series_id` can be provided to associate the post with a series.
     * Create Post
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['postCreate'] == null) {
            throw new runtime.RequiredError(
                'postCreate',
                'Required parameter "postCreate" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreateToJSON(requestParameters['postCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Create a new blog post. If slug is not provided, it will be generated from the title. `series_id` can be provided to associate the post with a series.
     * Create Post
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Sharecode
     */
    async createSharecodeRaw(requestParameters: CreateSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareCodeSchema>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling createSharecode().'
            );
        }

        if (requestParameters['shareCodeCreate'] == null) {
            throw new runtime.RequiredError(
                'shareCodeCreate',
                'Required parameter "shareCodeCreate" was null or undefined when calling createSharecode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/sharecodes`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShareCodeCreateToJSON(requestParameters['shareCodeCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareCodeSchemaFromJSON(jsonValue));
    }

    /**
     * Create Sharecode
     */
    async createSharecode(requestParameters: CreateSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareCodeSchema> {
        const response = await this.createSharecodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Post
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Post
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Sharecode
     */
    async deleteSharecodeRaw(requestParameters: DeleteSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling deleteSharecode().'
            );
        }

        if (requestParameters['code'] == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling deleteSharecode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/sharecodes/{code}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))).replace(`{${"code"}}`, encodeURIComponent(String(requestParameters['code']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sharecode
     */
    async deleteSharecode(requestParameters: DeleteSharecodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSharecodeRaw(requestParameters, initOverrides);
    }

    /**
     * Get Post By Id
     */
    async getPostByIdRaw(requestParameters: GetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling getPostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Get Post By Id
     */
    async getPostById(requestParameters: GetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.getPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Post By Slug And Year
     */
    async getPostBySlugAndYearRaw(requestParameters: GetPostBySlugAndYearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling getPostBySlugAndYear().'
            );
        }

        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getPostBySlugAndYear().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['draft'] != null) {
            queryParameters['draft'] = requestParameters['draft'];
        }

        if (requestParameters['sharecode'] != null) {
            queryParameters['sharecode'] = requestParameters['sharecode'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/slug/{year}/{slug}`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters['year']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Get Post By Slug And Year
     */
    async getPostBySlugAndYear(requestParameters: GetPostBySlugAndYearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.getPostBySlugAndYearRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Post Files By Id
     */
    async getPostFilesByIdRaw(requestParameters: GetPostFilesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FileDetails>>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling getPostFilesById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/files`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FileDetailsFromJSON));
    }

    /**
     * Get Post Files By Id
     */
    async getPostFilesById(requestParameters: GetPostFilesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FileDetails>> {
        const response = await this.getPostFilesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List posts, optionally filtered by series, author, or draft status. The \'order\' parameter controls the ordering of posts. Use \'-published_at\' (default for published), \'-updated_at\' (default for drafts).
     * List Posts
     */
    async listPostsRaw(requestParameters: ListPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPostListPublic>> {
        const queryParameters: any = {};

        if (requestParameters['seriesSlug'] != null) {
            queryParameters['series_slug'] = requestParameters['seriesSlug'];
        }

        if (requestParameters['authorId'] != null) {
            queryParameters['author_id'] = requestParameters['authorId'];
        }

        if (requestParameters['drafts'] != null) {
            queryParameters['drafts'] = requestParameters['drafts'];
        }

        if (requestParameters['allPosts'] != null) {
            queryParameters['all_posts'] = requestParameters['allPosts'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPostListPublicFromJSON(jsonValue));
    }

    /**
     * List posts, optionally filtered by series, author, or draft status. The \'order\' parameter controls the ordering of posts. Use \'-published_at\' (default for published), \'-updated_at\' (default for drafts).
     * List Posts
     */
    async listPosts(requestParameters: ListPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPostListPublic> {
        const response = await this.listPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Sharecodes
     */
    async listSharecodesRaw(requestParameters: ListSharecodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ShareCodeSchema>>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling listSharecodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}/sharecodes`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShareCodeSchemaFromJSON));
    }

    /**
     * List Sharecodes
     */
    async listSharecodes(requestParameters: ListSharecodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ShareCodeSchema>> {
        const response = await this.listSharecodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing blog post. All fields in payload are optional. `series_id` can be provided or set to `null` to disassociate from a series.
     * Update Post
     */
    async updatePostRaw(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostPublic>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling updatePost().'
            );
        }

        if (requestParameters['postUpdate'] == null) {
            throw new runtime.RequiredError(
                'postUpdate',
                'Required parameter "postUpdate" was null or undefined when calling updatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/posts/{post_id}`.replace(`{${"post_id"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdateToJSON(requestParameters['postUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostPublicFromJSON(jsonValue));
    }

    /**
     * Update an existing blog post. All fields in payload are optional. `series_id` can be provided or set to `null` to disassociate from a series.
     * Update Post
     */
    async updatePost(requestParameters: UpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostPublic> {
        const response = await this.updatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
