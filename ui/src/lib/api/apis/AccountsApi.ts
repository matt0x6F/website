/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NewAccount,
  UserSelf,
} from '../models/index';
import {
    NewAccountFromJSON,
    NewAccountToJSON,
    UserSelfFromJSON,
    UserSelfToJSON,
} from '../models/index';

export interface AccountsApiSignUpRequest {
    newAccount: NewAccount;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Creates a new user
     * Sign Up
     */
    async accountsApiSignUpRaw(requestParameters: AccountsApiSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSelf>> {
        if (requestParameters['newAccount'] == null) {
            throw new runtime.RequiredError(
                'newAccount',
                'Required parameter "newAccount" was null or undefined when calling accountsApiSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/sign_up`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: NewAccountToJSON(requestParameters['newAccount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSelfFromJSON(jsonValue));
    }

    /**
     * Creates a new user
     * Sign Up
     */
    async accountsApiSignUp(requestParameters: AccountsApiSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSelf> {
        const response = await this.accountsApiSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the calling users details
     * Whoami
     */
    async accountsApiWhoamiRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSelf>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/whoami`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSelfFromJSON(jsonValue));
    }

    /**
     * Returns the calling users details
     * Whoami
     */
    async accountsApiWhoami(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSelf> {
        const response = await this.accountsApiWhoamiRaw(initOverrides);
        return await response.value();
    }

}
