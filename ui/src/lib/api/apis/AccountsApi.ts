/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminUserDetails,
  AdminUserModify,
  AuthError,
  NewAccount,
  PagedAdminUserDetails,
  UpdateAccount,
  UserSelf,
} from '../models/index';
import {
    AdminUserDetailsFromJSON,
    AdminUserDetailsToJSON,
    AdminUserModifyFromJSON,
    AdminUserModifyToJSON,
    AuthErrorFromJSON,
    AuthErrorToJSON,
    NewAccountFromJSON,
    NewAccountToJSON,
    PagedAdminUserDetailsFromJSON,
    PagedAdminUserDetailsToJSON,
    UpdateAccountFromJSON,
    UpdateAccountToJSON,
    UserSelfFromJSON,
    UserSelfToJSON,
} from '../models/index';

export interface AccountsApiDeleteUserRequest {
    userId: number;
}

export interface AccountsApiGetUserRequest {
    userId: number;
}

export interface AccountsApiListUsersRequest {
    limit?: number;
    offset?: number;
}

export interface AccountsApiSignUpRequest {
    newAccount: NewAccount;
}

export interface AccountsApiUpdateSelfRequest {
    updateAccount: UpdateAccount;
}

export interface AccountsApiUpdateUserRequest {
    userId: number;
    adminUserModify: AdminUserModify;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Deletes the calling user
     * Delete Self
     */
    async accountsApiDeleteSelfRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the calling user
     * Delete Self
     */
    async accountsApiDeleteSelf(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountsApiDeleteSelfRaw(initOverrides);
    }

    /**
     * Deletes a user
     * Delete User
     */
    async accountsApiDeleteUserRaw(requestParameters: AccountsApiDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling accountsApiDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a user
     * Delete User
     */
    async accountsApiDeleteUser(requestParameters: AccountsApiDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.accountsApiDeleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific user
     * Get User
     */
    async accountsApiGetUserRaw(requestParameters: AccountsApiGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserDetails>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling accountsApiGetUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserDetailsFromJSON(jsonValue));
    }

    /**
     * Returns a specific user
     * Get User
     */
    async accountsApiGetUser(requestParameters: AccountsApiGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserDetails> {
        const response = await this.accountsApiGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all users
     * List Users
     */
    async accountsApiListUsersRaw(requestParameters: AccountsApiListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedAdminUserDetails>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedAdminUserDetailsFromJSON(jsonValue));
    }

    /**
     * Returns a list of all users
     * List Users
     */
    async accountsApiListUsers(requestParameters: AccountsApiListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedAdminUserDetails> {
        const response = await this.accountsApiListUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user
     * Sign Up
     */
    async accountsApiSignUpRaw(requestParameters: AccountsApiSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSelf>> {
        if (requestParameters['newAccount'] == null) {
            throw new runtime.RequiredError(
                'newAccount',
                'Required parameter "newAccount" was null or undefined when calling accountsApiSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/sign_up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewAccountToJSON(requestParameters['newAccount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSelfFromJSON(jsonValue));
    }

    /**
     * Creates a new user
     * Sign Up
     */
    async accountsApiSignUp(requestParameters: AccountsApiSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSelf> {
        const response = await this.accountsApiSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the calling users details
     * Update Self
     */
    async accountsApiUpdateSelfRaw(requestParameters: AccountsApiUpdateSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSelf>> {
        if (requestParameters['updateAccount'] == null) {
            throw new runtime.RequiredError(
                'updateAccount',
                'Required parameter "updateAccount" was null or undefined when calling accountsApiUpdateSelf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/me`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAccountToJSON(requestParameters['updateAccount']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSelfFromJSON(jsonValue));
    }

    /**
     * Updates the calling users details
     * Update Self
     */
    async accountsApiUpdateSelf(requestParameters: AccountsApiUpdateSelfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSelf> {
        const response = await this.accountsApiUpdateSelfRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a user
     * Update User
     */
    async accountsApiUpdateUserRaw(requestParameters: AccountsApiUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserDetails>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling accountsApiUpdateUser().'
            );
        }

        if (requestParameters['adminUserModify'] == null) {
            throw new runtime.RequiredError(
                'adminUserModify',
                'Required parameter "adminUserModify" was null or undefined when calling accountsApiUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdminUserModifyToJSON(requestParameters['adminUserModify']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserDetailsFromJSON(jsonValue));
    }

    /**
     * Updates a user
     * Update User
     */
    async accountsApiUpdateUser(requestParameters: AccountsApiUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserDetails> {
        const response = await this.accountsApiUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the calling users details
     * Whoami
     */
    async accountsApiWhoamiRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSelf>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/accounts/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSelfFromJSON(jsonValue));
    }

    /**
     * Returns the calling users details
     * Whoami
     */
    async accountsApiWhoami(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSelf> {
        const response = await this.accountsApiWhoamiRaw(initOverrides);
        return await response.value();
    }

}
