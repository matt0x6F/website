/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FileDetails,
  FileMetadata,
  FileMutateMetadata,
  OrphanedFiles,
  PagedFileDetails,
} from '../models/index';
import {
    FileDetailsFromJSON,
    FileDetailsToJSON,
    FileMetadataFromJSON,
    FileMetadataToJSON,
    FileMutateMetadataFromJSON,
    FileMutateMetadataToJSON,
    OrphanedFilesFromJSON,
    OrphanedFilesToJSON,
    PagedFileDetailsFromJSON,
    PagedFileDetailsToJSON,
} from '../models/index';

export interface CreateFileRequest {
    upload: Blob;
    metadata: FileMetadata;
}

export interface DeleteFileRequest {
    id: number;
}

export interface GetFileRequest {
    id: number;
}

export interface ListFilesRequest {
    visibility?: ListFilesVisibilityEnum;
    limit?: number;
    offset?: number;
}

export interface UpdateFileRequest {
    id: number;
    fileMutateMetadata: FileMutateMetadata;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     * Creates a file with or without post associations.
     * Create File
     */
    async createFileRaw(requestParameters: CreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDetails>> {
        if (requestParameters['upload'] == null) {
            throw new runtime.RequiredError(
                'upload',
                'Required parameter "upload" was null or undefined when calling createFile().'
            );
        }

        if (requestParameters['metadata'] == null) {
            throw new runtime.RequiredError(
                'metadata',
                'Required parameter "metadata" was null or undefined when calling createFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['upload'] != null) {
            formParams.append('upload', requestParameters['upload'] as any);
        }

        if (requestParameters['metadata'] != null) {
            formParams.append('metadata', new Blob([JSON.stringify(FileMetadataToJSON(requestParameters['metadata']))], { type: "application/json", }));
                    }

        const response = await this.request({
            path: `/api/files/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDetailsFromJSON(jsonValue));
    }

    /**
     * Creates a file with or without post associations.
     * Create File
     */
    async createFile(requestParameters: CreateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDetails> {
        const response = await this.createFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a file from the database and S3.
     * Delete File
     */
    async deleteFileRaw(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a file from the database and S3.
     * Delete File
     */
    async deleteFile(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFileRaw(requestParameters, initOverrides);
    }

    /**
     * Gets all the details of a file.
     * Get File
     */
    async getFileRaw(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDetailsFromJSON(jsonValue));
    }

    /**
     * Gets all the details of a file.
     * Get File
     */
    async getFile(requestParameters: GetFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDetails> {
        const response = await this.getFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all files
     * List Files
     */
    async listFilesRaw(requestParameters: ListFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedFileDetails>> {
        const queryParameters: any = {};

        if (requestParameters['visibility'] != null) {
            queryParameters['visibility'] = requestParameters['visibility'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedFileDetailsFromJSON(jsonValue));
    }

    /**
     * List all files
     * List Files
     */
    async listFiles(requestParameters: ListFilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedFileDetails> {
        const response = await this.listFilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Find files that exist in storage but not in the database. If a file exists in both public and private storage, it will be considered public. Returns detailed metadata about each orphaned file.
     * List Orphaned Files
     */
    async listOrphanedFilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrphanedFiles>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/orphaned`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrphanedFilesFromJSON(jsonValue));
    }

    /**
     * Find files that exist in storage but not in the database. If a file exists in both public and private storage, it will be considered public. Returns detailed metadata about each orphaned file.
     * List Orphaned Files
     */
    async listOrphanedFiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrphanedFiles> {
        const response = await this.listOrphanedFilesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Updates a file, namely the posts associated with the file. File properties are immutable.
     * Update File
     */
    async updateFileRaw(requestParameters: UpdateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FileDetails>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateFile().'
            );
        }

        if (requestParameters['fileMutateMetadata'] == null) {
            throw new runtime.RequiredError(
                'fileMutateMetadata',
                'Required parameter "fileMutateMetadata" was null or undefined when calling updateFile().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FileMutateMetadataToJSON(requestParameters['fileMutateMetadata']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FileDetailsFromJSON(jsonValue));
    }

    /**
     * Updates a file, namely the posts associated with the file. File properties are immutable.
     * Update File
     */
    async updateFile(requestParameters: UpdateFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FileDetails> {
        const response = await this.updateFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListFilesVisibilityEnum = {
    Public: 'public',
    Private: 'private',
    All: 'all'
} as const;
export type ListFilesVisibilityEnum = typeof ListFilesVisibilityEnum[keyof typeof ListFilesVisibilityEnum];
