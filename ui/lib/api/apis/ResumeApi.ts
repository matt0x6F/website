/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResumeSchema,
} from '../models/index';
import {
    ResumeSchemaFromJSON,
    ResumeSchemaToJSON,
} from '../models/index';

export interface ApiUpdateResumeRequest {
    resumeSchema: ResumeSchema;
}

/**
 * 
 */
export class ResumeApi extends runtime.BaseAPI {

    /**
     * Get the resume data
     * Get Resume
     */
    async apiGetResumeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResumeSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/resume/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResumeSchemaFromJSON(jsonValue));
    }

    /**
     * Get the resume data
     * Get Resume
     */
    async apiGetResume(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResumeSchema> {
        const response = await this.apiGetResumeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update the resume data. Only staff members can update the resume.
     * Update Resume
     */
    async apiUpdateResumeRaw(requestParameters: ApiUpdateResumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResumeSchema>> {
        if (requestParameters['resumeSchema'] == null) {
            throw new runtime.RequiredError(
                'resumeSchema',
                'Required parameter "resumeSchema" was null or undefined when calling apiUpdateResume().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/resume/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResumeSchemaToJSON(requestParameters['resumeSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResumeSchemaFromJSON(jsonValue));
    }

    /**
     * Update the resume data. Only staff members can update the resume.
     * Update Resume
     */
    async apiUpdateResume(requestParameters: ApiUpdateResumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResumeSchema> {
        const response = await this.apiUpdateResumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
