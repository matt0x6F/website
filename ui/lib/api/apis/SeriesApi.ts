/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedPostSummaryForSeries,
  PagedSeriesPublic,
  SeriesCreate,
  SeriesDetailPublic,
  SeriesIdOrSlug,
  SeriesPublic,
  SeriesUpdate,
} from '../models/index';
import {
    PagedPostSummaryForSeriesFromJSON,
    PagedPostSummaryForSeriesToJSON,
    PagedSeriesPublicFromJSON,
    PagedSeriesPublicToJSON,
    SeriesCreateFromJSON,
    SeriesCreateToJSON,
    SeriesDetailPublicFromJSON,
    SeriesDetailPublicToJSON,
    SeriesIdOrSlugFromJSON,
    SeriesIdOrSlugToJSON,
    SeriesPublicFromJSON,
    SeriesPublicToJSON,
    SeriesUpdateFromJSON,
    SeriesUpdateToJSON,
} from '../models/index';

export interface CreateSeriesRequest {
    seriesCreate: SeriesCreate;
}

export interface DeleteSeriesRequest {
    seriesId: number;
}

export interface GetSeriesDetailByIdRequest {
    seriesId: number;
    includePosts?: boolean;
    postsLimit?: number;
}

export interface GetSeriesDetailBySlugRequest {
    slug: string;
    includePosts?: boolean;
    postsLimit?: number;
}

export interface ListPostsInSeriesRequest {
    seriesIdOrSlug: SeriesIdOrSlug;
    excludePostId?: number | null;
    order?: string;
    limit?: number;
    offset?: number;
}

export interface ListSeriesRequest {
    includePostsCount?: boolean;
    limit?: number;
    offset?: number;
}

export interface UpdateSeriesRequest {
    seriesId: number;
    seriesUpdate: SeriesUpdate;
}

/**
 * 
 */
export class SeriesApi extends runtime.BaseAPI {

    /**
     * Create a new series. Title and slug are required. Slug is auto-generated from title if not provided or if an empty string is passed.
     * Create Series
     */
    async createSeriesRaw(requestParameters: CreateSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeriesPublic>> {
        if (requestParameters['seriesCreate'] == null) {
            throw new runtime.RequiredError(
                'seriesCreate',
                'Required parameter "seriesCreate" was null or undefined when calling createSeries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/series/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SeriesCreateToJSON(requestParameters['seriesCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesPublicFromJSON(jsonValue));
    }

    /**
     * Create a new series. Title and slug are required. Slug is auto-generated from title if not provided or if an empty string is passed.
     * Create Series
     */
    async createSeries(requestParameters: CreateSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeriesPublic> {
        const response = await this.createSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a series. Posts belonging to this series will have their \'series\' field set to NULL. Prevent deletion if any posts are still associated with the series.
     * Delete Series
     */
    async deleteSeriesRaw(requestParameters: DeleteSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['seriesId'] == null) {
            throw new runtime.RequiredError(
                'seriesId',
                'Required parameter "seriesId" was null or undefined when calling deleteSeries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/series/{series_id}`.replace(`{${"series_id"}}`, encodeURIComponent(String(requestParameters['seriesId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a series. Posts belonging to this series will have their \'series\' field set to NULL. Prevent deletion if any posts are still associated with the series.
     * Delete Series
     */
    async deleteSeries(requestParameters: DeleteSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSeriesRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a single series by its ID. Includes a list of associated posts (summaries) by default. Use `include_posts=false` to omit posts. Use `posts_limit` to control the number of posts returned.
     * Get Series Detail By Id
     */
    async getSeriesDetailByIdRaw(requestParameters: GetSeriesDetailByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeriesDetailPublic>> {
        if (requestParameters['seriesId'] == null) {
            throw new runtime.RequiredError(
                'seriesId',
                'Required parameter "seriesId" was null or undefined when calling getSeriesDetailById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includePosts'] != null) {
            queryParameters['include_posts'] = requestParameters['includePosts'];
        }

        if (requestParameters['postsLimit'] != null) {
            queryParameters['posts_limit'] = requestParameters['postsLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/series/{series_id}`.replace(`{${"series_id"}}`, encodeURIComponent(String(requestParameters['seriesId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesDetailPublicFromJSON(jsonValue));
    }

    /**
     * Retrieve a single series by its ID. Includes a list of associated posts (summaries) by default. Use `include_posts=false` to omit posts. Use `posts_limit` to control the number of posts returned.
     * Get Series Detail By Id
     */
    async getSeriesDetailById(requestParameters: GetSeriesDetailByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeriesDetailPublic> {
        const response = await this.getSeriesDetailByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single series by its slug. Includes a list of associated posts (summaries) by default. Use `include_posts=false` to omit posts. Use `posts_limit` to control the number of posts returned.
     * Get Series Detail By Slug
     */
    async getSeriesDetailBySlugRaw(requestParameters: GetSeriesDetailBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeriesDetailPublic>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling getSeriesDetailBySlug().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['includePosts'] != null) {
            queryParameters['include_posts'] = requestParameters['includePosts'];
        }

        if (requestParameters['postsLimit'] != null) {
            queryParameters['posts_limit'] = requestParameters['postsLimit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/series/slug/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesDetailPublicFromJSON(jsonValue));
    }

    /**
     * Retrieve a single series by its slug. Includes a list of associated posts (summaries) by default. Use `include_posts=false` to omit posts. Use `posts_limit` to control the number of posts returned.
     * Get Series Detail By Slug
     */
    async getSeriesDetailBySlug(requestParameters: GetSeriesDetailBySlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeriesDetailPublic> {
        const response = await this.getSeriesDetailBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all published posts belonging to a specific series. Optionally exclude a specific post by its ID (e.g., the current post being viewed). The \'order\' parameter controls the ordering of posts. Use \'-published_at\' (default) for descending, \'published_at\' for ascending.
     * List Posts In Series
     */
    async listPostsInSeriesRaw(requestParameters: ListPostsInSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedPostSummaryForSeries>> {
        if (requestParameters['seriesIdOrSlug'] == null) {
            throw new runtime.RequiredError(
                'seriesIdOrSlug',
                'Required parameter "seriesIdOrSlug" was null or undefined when calling listPostsInSeries().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['excludePostId'] != null) {
            queryParameters['exclude_post_id'] = requestParameters['excludePostId'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/series/{series_id_or_slug}/posts`.replace(`{${"series_id_or_slug"}}`, encodeURIComponent(String(requestParameters['seriesIdOrSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedPostSummaryForSeriesFromJSON(jsonValue));
    }

    /**
     * List all published posts belonging to a specific series. Optionally exclude a specific post by its ID (e.g., the current post being viewed). The \'order\' parameter controls the ordering of posts. Use \'-published_at\' (default) for descending, \'published_at\' for ascending.
     * List Posts In Series
     */
    async listPostsInSeries(requestParameters: ListPostsInSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedPostSummaryForSeries> {
        const response = await this.listPostsInSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all series. Use `include_posts_count=true` to get the number of posts in each series.
     * List Series
     */
    async listSeriesRaw(requestParameters: ListSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedSeriesPublic>> {
        const queryParameters: any = {};

        if (requestParameters['includePostsCount'] != null) {
            queryParameters['include_posts_count'] = requestParameters['includePostsCount'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/series/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedSeriesPublicFromJSON(jsonValue));
    }

    /**
     * List all series. Use `include_posts_count=true` to get the number of posts in each series.
     * List Series
     */
    async listSeries(requestParameters: ListSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedSeriesPublic> {
        const response = await this.listSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing series. All fields in payload are optional. If slug is provided and changed, it will be updated. If title is changed and slug is not provided (or empty), slug might be regenerated.
     * Update Series
     */
    async updateSeriesRaw(requestParameters: UpdateSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SeriesPublic>> {
        if (requestParameters['seriesId'] == null) {
            throw new runtime.RequiredError(
                'seriesId',
                'Required parameter "seriesId" was null or undefined when calling updateSeries().'
            );
        }

        if (requestParameters['seriesUpdate'] == null) {
            throw new runtime.RequiredError(
                'seriesUpdate',
                'Required parameter "seriesUpdate" was null or undefined when calling updateSeries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/series/{series_id}`.replace(`{${"series_id"}}`, encodeURIComponent(String(requestParameters['seriesId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SeriesUpdateToJSON(requestParameters['seriesUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SeriesPublicFromJSON(jsonValue));
    }

    /**
     * Update an existing series. All fields in payload are optional. If slug is provided and changed, it will be updated. If title is changed and slug is not provided (or empty), slug might be regenerated.
     * Update Series
     */
    async updateSeries(requestParameters: UpdateSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SeriesPublic> {
        const response = await this.updateSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
