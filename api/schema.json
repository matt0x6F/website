{
  "openapi": "3.1.0",
  "info": {
    "title": "ooo-yay.com API",
    "version": "1.0.0",
    "description": "Resource-based API for ooo-yay.com."
  },
  "paths": {
    "/api/health": {
      "get": {
        "operationId": "core_api_healthcheck",
        "summary": "Health check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        },
        "description": "Returns a simple health check response."
      }
    },
    "/api/token/pair": {
      "post": {
        "operationId": "token_obtain_pair",
        "summary": "Obtain Token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenObtainPairOutputSchema"
                }
              }
            }
          }
        },
        "tags": [
          "token"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenObtainPairInputSchema"
              }
            }
          },
          "required": true
        }
      }
    },
    "/api/token/refresh": {
      "post": {
        "operationId": "token_refresh",
        "summary": "Refresh Token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenRefreshOutputSchema"
                }
              }
            }
          }
        },
        "tags": [
          "token"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshInputSchema"
              }
            }
          },
          "required": true
        }
      }
    },
    "/api/token/verify": {
      "post": {
        "operationId": "token_verify",
        "summary": "Verify Token",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "tags": [
          "token"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenVerifyInputSchema"
              }
            }
          },
          "required": true
        }
      }
    },
    "/api/accounts/me": {
      "get": {
        "operationId": "accounts_api_whoami",
        "summary": "Whoami",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSelf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Returns the calling users details",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "put": {
        "operationId": "accounts_api_update_self",
        "summary": "Update Self",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSelf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Updates the calling users details",
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccount"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "accounts_api_delete_self",
        "summary": "Delete Self",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Deletes the calling user",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/accounts/sign_up": {
      "post": {
        "operationId": "accounts_api_sign_up",
        "summary": "Sign Up",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSelf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Creates a new user",
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAccount"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/accounts/": {
      "get": {
        "operationId": "accounts_api_list_users",
        "summary": "List Users",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedAdminUserDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Returns a list of all users",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/accounts/{user_id}": {
      "get": {
        "operationId": "accounts_api_get_user",
        "summary": "Get User",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Returns a specific user",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "put": {
        "operationId": "accounts_api_update_user",
        "summary": "Update User",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUserDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Updates a user",
        "tags": [
          "accounts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUserModify"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "accounts_api_delete_user",
        "summary": "Delete User",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Deletes a user",
        "tags": [
          "accounts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/groups/": {
      "get": {
        "operationId": "accounts_groups_list_groups",
        "summary": "List Groups",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedGroup"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Returns a list of all groups",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "post": {
        "operationId": "accounts_groups_create_group",
        "summary": "Create Group",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Creates a new group",
        "tags": [
          "groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMutate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/groups/{group_id}": {
      "put": {
        "operationId": "accounts_groups_update_group",
        "summary": "Update Group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "title": "Group Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Updates a group",
        "tags": [
          "groups"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMutate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "accounts_groups_delete_group",
        "summary": "Delete Group",
        "parameters": [
          {
            "in": "path",
            "name": "group_id",
            "schema": {
              "title": "Group Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Deletes a group",
        "tags": [
          "groups"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/permissions/": {
      "get": {
        "operationId": "accounts_groups_list_permissions",
        "summary": "List Permissions",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedPermission"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Returns a list of all permissions",
        "tags": [
          "permissions"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "post": {
        "operationId": "accounts_groups_create_permission",
        "summary": "Create Permission",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Creates a new permission",
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionMutate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/permissions/{permission_id}": {
      "put": {
        "operationId": "accounts_groups_update_permission",
        "summary": "Update Permission",
        "parameters": [
          {
            "in": "path",
            "name": "permission_id",
            "schema": {
              "title": "Permission Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Permission"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          }
        },
        "description": "Updates a permission",
        "tags": [
          "permissions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionMutate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/contenttypes/": {
      "get": {
        "operationId": "accounts_contenttypes_list_content_types",
        "summary": "List content types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ContentType"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "List all available content types in the system.\nContent types represent the models available in the Django application.\nThis endpoint is restricted to staff users only as it's primarily used for administrative purposes.",
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/series/{series_id}": {
      "delete": {
        "operationId": "blog_api_delete_series",
        "summary": "Delete Series",
        "parameters": [
          {
            "in": "path",
            "name": "series_id",
            "schema": {
              "title": "Series Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "description": "Delete a series. Posts belonging to this series will have their 'series' field set to NULL.\nPrevent deletion if any posts are still associated with the series.",
        "tags": [
          "series"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "get": {
        "operationId": "blog_api_get_series_detail_by_id",
        "summary": "Get Series Detail By Id",
        "parameters": [
          {
            "in": "path",
            "name": "series_id",
            "schema": {
              "title": "Series Id",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_posts",
            "schema": {
              "default": true,
              "title": "Include Posts",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "posts_limit",
            "schema": {
              "default": 10,
              "title": "Posts Limit",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesDetailPublic"
                }
              }
            }
          }
        },
        "description": "Retrieve a single series by its ID.\nIncludes a list of associated posts (summaries) by default.\nUse `include_posts=false` to omit posts.\nUse `posts_limit` to control the number of posts returned.",
        "tags": [
          "series"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "put": {
        "operationId": "blog_api_update_series",
        "summary": "Update Series",
        "parameters": [
          {
            "in": "path",
            "name": "series_id",
            "schema": {
              "title": "Series Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesPublic"
                }
              }
            }
          }
        },
        "description": "Update an existing series. All fields in payload are optional.\nIf slug is provided and changed, it will be updated.\nIf title is changed and slug is not provided (or empty), slug might be regenerated.",
        "tags": [
          "series"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeriesUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/series/": {
      "post": {
        "operationId": "blog_api_create_series",
        "summary": "Create Series",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesPublic"
                }
              }
            }
          }
        },
        "description": "Create a new series. Title and slug are required.\nSlug is auto-generated from title if not provided or if an empty string is passed.",
        "tags": [
          "series"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SeriesCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "get": {
        "operationId": "blog_api_list_series",
        "summary": "List Series",
        "parameters": [
          {
            "in": "query",
            "name": "include_posts_count",
            "schema": {
              "default": false,
              "title": "Include Posts Count",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "title": "Page",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedSeriesPublic"
                }
              }
            }
          }
        },
        "description": "List all series. Use `include_posts_count=true` to get the number of posts in each series.",
        "tags": [
          "series"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/series/slug/{slug}": {
      "get": {
        "operationId": "blog_api_get_series_detail_by_slug",
        "summary": "Get Series Detail By Slug",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "title": "Slug",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_posts",
            "schema": {
              "default": true,
              "title": "Include Posts",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "posts_limit",
            "schema": {
              "default": 10,
              "title": "Posts Limit",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SeriesDetailPublic"
                }
              }
            }
          }
        },
        "description": "Retrieve a single series by its slug.\nIncludes a list of associated posts (summaries) by default.\nUse `include_posts=false` to omit posts.\nUse `posts_limit` to control the number of posts returned.",
        "tags": [
          "series"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/series/{series_id_or_slug}/posts": {
      "get": {
        "operationId": "blog_api_list_posts_in_series",
        "summary": "List Posts In Series",
        "parameters": [
          {
            "in": "path",
            "name": "series_id_or_slug",
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Series Id Or Slug"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "exclude_post_id",
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Exclude Post Id"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "title": "Page",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedPostSummaryForSeries"
                }
              }
            }
          }
        },
        "description": "List all published posts belonging to a specific series.\nOptionally exclude a specific post by its ID (e.g., the current post being viewed).",
        "tags": [
          "series"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/posts/": {
      "post": {
        "operationId": "blog_api_create_post",
        "summary": "Create Post",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPublic"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        },
        "description": "Create a new blog post.\nIf slug is not provided, it will be generated from the title.\n`series_id` can be provided to associate the post with a series.",
        "tags": [
          "posts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "get": {
        "operationId": "blog_api_list_posts",
        "summary": "List Posts",
        "parameters": [
          {
            "in": "query",
            "name": "series_slug",
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Series Slug"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "author_id",
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Author Id"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "drafts",
            "schema": {
              "default": false,
              "title": "Drafts",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "all_posts",
            "schema": {
              "default": false,
              "title": "All Posts",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "minimum": 1,
              "title": "Page",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedPostListPublic"
                }
              }
            }
          }
        },
        "tags": [
          "posts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/posts/{post_id}": {
      "put": {
        "operationId": "blog_api_update_post",
        "summary": "Update Post",
        "parameters": [
          {
            "in": "path",
            "name": "post_id",
            "schema": {
              "title": "Post Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPublic"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update an existing blog post. All fields in payload are optional.\n`series_id` can be provided or set to `null` to disassociate from a series.",
        "tags": [
          "posts"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "get": {
        "operationId": "blog_api_get_post_by_id",
        "summary": "Get Post By Id",
        "parameters": [
          {
            "in": "path",
            "name": "post_id",
            "schema": {
              "title": "Post Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPublic"
                }
              }
            }
          }
        },
        "tags": [
          "posts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "blog_api_delete_post",
        "summary": "Delete Post",
        "parameters": [
          {
            "in": "path",
            "name": "post_id",
            "schema": {
              "title": "Post Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "tags": [
          "posts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/posts/slug/{year}/{slug}": {
      "get": {
        "operationId": "blog_api_get_post_by_slug_and_year",
        "summary": "Get Post By Slug And Year",
        "parameters": [
          {
            "in": "path",
            "name": "year",
            "schema": {
              "title": "Year",
              "type": "integer"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "slug",
            "schema": {
              "title": "Slug",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "draft",
            "schema": {
              "default": false,
              "title": "Draft",
              "type": "boolean"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostPublic"
                }
              }
            }
          }
        },
        "tags": [
          "posts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/posts/{post_id}/files": {
      "get": {
        "operationId": "blog_api_get_post_files_by_id",
        "summary": "Get Post Files By Id",
        "parameters": [
          {
            "in": "path",
            "name": "post_id",
            "schema": {
              "title": "Post Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileDetails"
                  },
                  "title": "Response",
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": [
          "posts"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/files/": {
      "get": {
        "operationId": "blog_api_list_files",
        "summary": "List Files",
        "parameters": [
          {
            "in": "query",
            "name": "visibility",
            "schema": {
              "default": "all",
              "enum": [
                "public",
                "private",
                "all"
              ],
              "title": "Visibility",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedFileDetails"
                }
              }
            }
          }
        },
        "description": "List all files",
        "tags": [
          "files"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "post": {
        "operationId": "blog_api_create_file",
        "summary": "Create File",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDetails"
                }
              }
            }
          }
        },
        "description": "Creates a file with or without post associations.",
        "tags": [
          "files"
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "upload": {
                    "format": "binary",
                    "title": "Upload",
                    "type": "string"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/FileMetadata"
                  }
                },
                "required": [
                  "upload",
                  "metadata"
                ],
                "title": "MultiPartBodyParams",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/files/orphaned": {
      "get": {
        "operationId": "blog_api_list_orphaned_files",
        "summary": "List Orphaned Files",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrphanedFiles"
                }
              }
            }
          }
        },
        "description": "Find files that exist in storage but not in the database.\nIf a file exists in both public and private storage, it will be considered public.\nReturns detailed metadata about each orphaned file.",
        "tags": [
          "files"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/files/{id}": {
      "get": {
        "operationId": "blog_api_get_file",
        "summary": "Get File",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDetails"
                }
              }
            }
          }
        },
        "description": "Gets all the details of a file.",
        "tags": [
          "files"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "put": {
        "operationId": "blog_api_update_file",
        "summary": "Update File",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDetails"
                }
              }
            }
          }
        },
        "description": "Updates a file, namely the posts associated with the file. File properties are immutable.",
        "tags": [
          "files"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileMutateMetadata"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "blog_api_delete_file",
        "summary": "Delete File",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes a file from the database and S3.",
        "tags": [
          "files"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/comments/": {
      "get": {
        "operationId": "blog_api_list_comments",
        "summary": "List Comments",
        "parameters": [
          {
            "in": "query",
            "name": "post_id",
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Post Id"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "top_level",
            "schema": {
              "default": false,
              "title": "Top Level",
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedCommentList"
                }
              }
            }
          }
        },
        "description": "List all comments for a post",
        "tags": [
          "comments"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "post": {
        "operationId": "blog_api_create_comment",
        "summary": "Create Comment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentList"
                }
              }
            }
          }
        },
        "description": "Creates a comment",
        "tags": [
          "comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/comments/moderation/queue": {
      "get": {
        "operationId": "blog_api_mod_queue_list",
        "summary": "Mod Queue List",
        "parameters": [
          {
            "in": "query",
            "name": "reviewed",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": false,
              "title": "Reviewed"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 100,
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "minimum": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedAdminCommentList"
                }
              }
            }
          }
        },
        "tags": [
          "moderation"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/comments/moderation/{id}": {
      "put": {
        "operationId": "blog_api_mod_update_comment",
        "summary": "Mod Update Comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminCommentList"
                }
              }
            }
          }
        },
        "tags": [
          "moderation"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCommentUpdate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/comments/{id}": {
      "get": {
        "operationId": "blog_api_get_comment",
        "summary": "Get Comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentList"
                }
              }
            }
          }
        },
        "description": "Gets all the details of a comment.",
        "tags": [
          "comments"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "put": {
        "operationId": "blog_api_update_comment",
        "summary": "Update Comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentList"
                }
              }
            }
          }
        },
        "tags": [
          "comments"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentMutate"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "JWTAuth": []
          }
        ]
      },
      "delete": {
        "operationId": "blog_api_delete_comment",
        "summary": "Delete Comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "comments"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    },
    "/api/feed/": {
      "get": {
        "operationId": "blog_api_feed",
        "summary": "Feed",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "default": 10,
              "title": "Limit",
              "type": "integer"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "default": 0,
              "title": "Offset",
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JSONFeed"
                }
              }
            }
          }
        },
        "tags": [
          "feed"
        ],
        "security": [
          {
            "JWTAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "HealthResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/HealthStatus"
          }
        },
        "required": [
          "status"
        ],
        "title": "HealthResponse",
        "type": "object"
      },
      "HealthStatus": {
        "enum": [
          "ok",
          "not_ok"
        ],
        "title": "HealthStatus",
        "type": "string"
      },
      "TokenObtainPairOutputSchema": {
        "properties": {
          "email": {
            "maxLength": 254,
            "title": "Email",
            "type": "string"
          },
          "refresh": {
            "title": "Refresh",
            "type": "string"
          },
          "access": {
            "title": "Access",
            "type": "string"
          }
        },
        "required": [
          "email",
          "refresh",
          "access"
        ],
        "title": "TokenObtainPairOutputSchema",
        "type": "object"
      },
      "TokenObtainPairInputSchema": {
        "properties": {
          "password": {
            "maxLength": 128,
            "title": "Password",
            "type": "string"
          },
          "email": {
            "maxLength": 254,
            "title": "Email",
            "type": "string"
          }
        },
        "required": [
          "password",
          "email"
        ],
        "title": "TokenObtainPairInputSchema",
        "type": "object"
      },
      "TokenRefreshOutputSchema": {
        "properties": {
          "refresh": {
            "title": "Refresh",
            "type": "string"
          },
          "access": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Access"
          }
        },
        "required": [
          "refresh",
          "access"
        ],
        "title": "TokenRefreshOutputSchema",
        "type": "object"
      },
      "TokenRefreshInputSchema": {
        "properties": {
          "refresh": {
            "title": "Refresh",
            "type": "string"
          }
        },
        "required": [
          "refresh"
        ],
        "title": "TokenRefreshInputSchema",
        "type": "object"
      },
      "Schema": {
        "properties": {},
        "title": "Schema",
        "type": "object"
      },
      "TokenVerifyInputSchema": {
        "properties": {
          "token": {
            "title": "Token",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "title": "TokenVerifyInputSchema",
        "type": "object"
      },
      "UserSelf": {
        "description": "Specifies fields that users can see about themselves",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "is_staff": {
            "title": "Is Staff",
            "type": "boolean"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "date_joined": {
            "format": "date-time",
            "title": "Date Joined",
            "type": "string"
          },
          "avatar_link": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Link"
          }
        },
        "required": [
          "id",
          "username",
          "email",
          "first_name",
          "last_name",
          "is_staff",
          "is_active",
          "date_joined"
        ],
        "title": "UserSelf",
        "type": "object"
      },
      "AuthError": {
        "properties": {
          "details": {
            "title": "Details",
            "type": "string"
          }
        },
        "required": [
          "details"
        ],
        "title": "AuthError",
        "type": "object"
      },
      "UpdateAccount": {
        "description": "Specifies fields that users can provide to update their account",
        "properties": {
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "old_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Old Password"
          },
          "new_password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "New Password"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "avatar_link": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Link"
          }
        },
        "title": "UpdateAccount",
        "type": "object"
      },
      "NewAccount": {
        "description": "Specifies fields that users can provide to create an account",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": "",
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": "",
            "title": "Last Name"
          }
        },
        "required": [
          "username",
          "email",
          "password"
        ],
        "title": "NewAccount",
        "type": "object"
      },
      "Input": {
        "properties": {
          "limit": {
            "default": 100,
            "minimum": 1,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "minimum": 0,
            "title": "Offset",
            "type": "integer"
          }
        },
        "title": "Input",
        "type": "object"
      },
      "AdminUserDetails": {
        "description": "Specifies fields that admins can see",
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "first_name": {
            "title": "First Name",
            "type": "string"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string"
          },
          "is_staff": {
            "title": "Is Staff",
            "type": "boolean"
          },
          "is_active": {
            "title": "Is Active",
            "type": "boolean"
          },
          "is_superuser": {
            "title": "Is Superuser",
            "type": "boolean"
          },
          "date_joined": {
            "format": "date-time",
            "title": "Date Joined",
            "type": "string"
          },
          "last_login": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Login"
          },
          "avatar_link": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Link"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "title": "Groups",
            "type": "array"
          },
          "user_permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "title": "User Permissions",
            "type": "array"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "required": [
          "id",
          "username",
          "email",
          "first_name",
          "last_name",
          "is_staff",
          "is_active",
          "is_superuser",
          "date_joined",
          "groups",
          "user_permissions"
        ],
        "title": "AdminUserDetails",
        "type": "object"
      },
      "ContentType": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "app_label": {
            "title": "App Label",
            "type": "string"
          },
          "model": {
            "title": "Model",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "app_labeled_name": {
            "title": "App Labeled Name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "app_label",
          "model",
          "name",
          "app_labeled_name"
        ],
        "title": "ContentType",
        "type": "object"
      },
      "Group": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "title": "Permissions",
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "permissions"
        ],
        "title": "Group",
        "type": "object"
      },
      "PagedAdminUserDetails": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AdminUserDetails"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedAdminUserDetails",
        "type": "object"
      },
      "Permission": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "codename": {
            "title": "Codename",
            "type": "string"
          },
          "content_type": {
            "$ref": "#/components/schemas/ContentType"
          }
        },
        "required": [
          "id",
          "name",
          "codename",
          "content_type"
        ],
        "title": "Permission",
        "type": "object"
      },
      "AdminUserModify": {
        "description": "Specifies fields that admins can change",
        "properties": {
          "username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          },
          "is_staff": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Staff"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_superuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Superuser"
          },
          "avatar_link": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Link"
          },
          "groups": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Group"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Groups"
          },
          "user_permissions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Permission"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Permissions"
          },
          "notes": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Notes"
          }
        },
        "title": "AdminUserModify",
        "type": "object"
      },
      "PagedGroup": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedGroup",
        "type": "object"
      },
      "GroupMutate": {
        "description": "Schema for creating and updating groups",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "permissions": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Permissions"
          }
        },
        "required": [
          "name"
        ],
        "title": "GroupMutate",
        "type": "object"
      },
      "PagedPermission": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedPermission",
        "type": "object"
      },
      "PermissionMutate": {
        "description": "Schema for creating and updating permissions",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "codename": {
            "title": "Codename",
            "type": "string"
          },
          "content_type": {
            "$ref": "#/components/schemas/ContentType"
          }
        },
        "required": [
          "name",
          "codename",
          "content_type"
        ],
        "title": "PermissionMutate",
        "type": "object"
      },
      "PostSummaryForSeries": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "year": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Year"
          },
          "published_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          }
        },
        "required": [
          "id",
          "title",
          "slug"
        ],
        "title": "PostSummaryForSeries",
        "type": "object"
      },
      "SeriesDetailPublic": {
        "properties": {
          "title": {
            "maxLength": 200,
            "title": "Title",
            "type": "string"
          },
          "slug": {
            "description": "URL-friendly identifier. Will be auto-generated from title if not provided.",
            "maxLength": 200,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "post_count": {
            "default": 0,
            "title": "Post Count",
            "type": "integer"
          },
          "posts": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/PostSummaryForSeries"
            },
            "title": "Posts",
            "type": "array"
          }
        },
        "required": [
          "title",
          "slug",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "SeriesDetailPublic",
        "type": "object"
      },
      "SeriesPublic": {
        "properties": {
          "title": {
            "maxLength": 200,
            "title": "Title",
            "type": "string"
          },
          "slug": {
            "description": "URL-friendly identifier. Will be auto-generated from title if not provided.",
            "maxLength": 200,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "post_count": {
            "default": 0,
            "title": "Post Count",
            "type": "integer"
          }
        },
        "required": [
          "title",
          "slug",
          "id",
          "created_at",
          "updated_at"
        ],
        "title": "SeriesPublic",
        "type": "object"
      },
      "SeriesUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "slug": {
            "anyOf": [
              {
                "maxLength": 200,
                "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "title": "SeriesUpdate",
        "type": "object"
      },
      "SeriesCreate": {
        "properties": {
          "title": {
            "maxLength": 200,
            "title": "Title",
            "type": "string"
          },
          "slug": {
            "description": "URL-friendly identifier. Will be auto-generated from title if not provided.",
            "maxLength": 200,
            "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "required": [
          "title",
          "slug"
        ],
        "title": "SeriesCreate",
        "type": "object"
      },
      "PagedSeriesPublic": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SeriesPublic"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedSeriesPublic",
        "type": "object"
      },
      "PagedPostSummaryForSeries": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PostSummaryForSeries"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedPostSummaryForSeries",
        "type": "object"
      },
      "PostPublic": {
        "properties": {
          "title": {
            "maxLength": 200,
            "title": "Title",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "published_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "series_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the series this post belongs to",
            "title": "Series Id"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserPublic"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "comment_count": {
            "default": 0,
            "title": "Comment Count",
            "type": "integer"
          },
          "series": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SeriesPublic"
              },
              {
                "type": "null"
              }
            ],
            "description": "Full details of the series this post belongs to"
          }
        },
        "required": [
          "title",
          "content",
          "id",
          "slug",
          "author",
          "created_at",
          "updated_at"
        ],
        "title": "PostPublic",
        "type": "object"
      },
      "UserPublic": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "is_staff": {
            "default": false,
            "title": "Is Staff",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "username"
        ],
        "title": "UserPublic",
        "type": "object"
      },
      "ValidationErrorResponse": {
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "string"
          }
        },
        "required": [
          "detail"
        ],
        "title": "ValidationErrorResponse",
        "type": "object"
      },
      "PostCreate": {
        "properties": {
          "title": {
            "maxLength": 200,
            "title": "Title",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "published_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "series_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the series this post belongs to",
            "title": "Series Id"
          },
          "slug": {
            "anyOf": [
              {
                "maxLength": 200,
                "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "URL-friendly identifier. Will be auto-generated from title if not provided and not present.",
            "title": "Slug"
          }
        },
        "required": [
          "title",
          "content"
        ],
        "title": "PostCreate",
        "type": "object"
      },
      "PagedPostListPublic": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PostListPublic"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedPostListPublic",
        "type": "object"
      },
      "PostListPublic": {
        "properties": {
          "title": {
            "maxLength": 200,
            "title": "Title",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "published_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "series_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the series this post belongs to",
            "title": "Series Id"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/UserPublic"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "comment_count": {
            "default": 0,
            "title": "Comment Count",
            "type": "integer"
          },
          "series": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SeriesPublic"
              },
              {
                "type": "null"
              }
            ],
            "description": "Full details of the series this post belongs to"
          }
        },
        "required": [
          "title",
          "content",
          "id",
          "slug",
          "author",
          "created_at",
          "updated_at"
        ],
        "title": "PostListPublic",
        "type": "object"
      },
      "PostUpdate": {
        "properties": {
          "title": {
            "anyOf": [
              {
                "maxLength": 200,
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "slug": {
            "anyOf": [
              {
                "maxLength": 200,
                "pattern": "^[a-z0-9]+(?:-[a-z0-9]+)*$",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Slug"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "published_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published At"
          },
          "series_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID of the series this post belongs to",
            "title": "Series Id"
          }
        },
        "title": "PostUpdate",
        "type": "object"
      },
      "FileDetails": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "content_type": {
            "title": "Content Type",
            "type": "string"
          },
          "charset": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Charset"
          },
          "size": {
            "title": "Size",
            "type": "integer"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "posts": {
            "items": {
              "$ref": "#/components/schemas/PostSummary"
            },
            "title": "Posts",
            "type": "array"
          },
          "visibility": {
            "title": "Visibility",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "content_type",
          "charset",
          "size",
          "location",
          "created_at",
          "posts",
          "visibility"
        ],
        "title": "FileDetails",
        "type": "object"
      },
      "PostSummary": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "published": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "slug"
        ],
        "title": "PostSummary",
        "type": "object"
      },
      "PagedFileDetails": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/FileDetails"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedFileDetails",
        "type": "object"
      },
      "FileMetadata": {
        "properties": {
          "posts": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Posts"
          },
          "visibility": {
            "default": "public",
            "title": "Visibility",
            "type": "string"
          }
        },
        "title": "FileMetadata",
        "type": "object"
      },
      "OrphanedFileDetails": {
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "size": {
            "title": "Size",
            "type": "integer"
          },
          "content_type": {
            "title": "Content Type",
            "type": "string"
          },
          "location": {
            "title": "Location",
            "type": "string"
          },
          "last_modified": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Modified"
          },
          "visibility": {
            "title": "Visibility",
            "type": "string"
          }
        },
        "required": [
          "name",
          "size",
          "content_type",
          "location",
          "last_modified",
          "visibility"
        ],
        "title": "OrphanedFileDetails",
        "type": "object"
      },
      "OrphanedFiles": {
        "properties": {
          "public": {
            "items": {
              "$ref": "#/components/schemas/OrphanedFileDetails"
            },
            "title": "Public",
            "type": "array"
          },
          "private": {
            "items": {
              "$ref": "#/components/schemas/OrphanedFileDetails"
            },
            "title": "Private",
            "type": "array"
          }
        },
        "required": [
          "public",
          "private"
        ],
        "title": "OrphanedFiles",
        "type": "object"
      },
      "FileMutateMetadata": {
        "properties": {
          "posts": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Posts"
          }
        },
        "title": "FileMutateMetadata",
        "type": "object"
      },
      "AuthorSummary": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The author's name",
            "title": "Name"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of a site owned by the author. It could be a blog, micro-blog, Twitter account, etc.",
            "title": "Url"
          },
          "avatar": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL for an image for the author. Should be square and relatively large \u2014 such as 512 x 512 pixels.",
            "title": "Avatar"
          }
        },
        "required": [
          "id",
          "username"
        ],
        "title": "AuthorSummary",
        "type": "object"
      },
      "CommentList": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "children": {
            "items": {
              "$ref": "#/components/schemas/CommentList"
            },
            "title": "Children",
            "type": "array"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/PostDetails"
          }
        },
        "required": [
          "id",
          "author",
          "content",
          "children",
          "created_at",
          "updated_at",
          "post"
        ],
        "title": "CommentList",
        "type": "object"
      },
      "PagedCommentList": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/CommentList"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedCommentList",
        "type": "object"
      },
      "PostDetails": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "published": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Published"
          },
          "author_id": {
            "title": "Author Id",
            "type": "integer"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "series": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SeriesSummary"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "id",
          "title",
          "content",
          "created_at",
          "updated_at",
          "author_id",
          "slug"
        ],
        "title": "PostDetails",
        "type": "object"
      },
      "SeriesSummary": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "title": {
            "title": "Title",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title"
        ],
        "title": "SeriesSummary",
        "type": "object"
      },
      "CommentCreate": {
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          },
          "parent_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parent Id"
          },
          "post_id": {
            "title": "Post Id",
            "type": "integer"
          }
        },
        "required": [
          "content",
          "post_id"
        ],
        "title": "CommentCreate",
        "type": "object"
      },
      "AdminChildCommentList": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/PostDetails"
          },
          "children": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AdminCommentList"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Children"
          },
          "visible": {
            "title": "Visible",
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "reviewed": {
            "title": "Reviewed",
            "type": "boolean"
          },
          "note": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "required": [
          "id",
          "author",
          "content",
          "post",
          "visible",
          "created_at",
          "updated_at",
          "reviewed"
        ],
        "title": "AdminChildCommentList",
        "type": "object"
      },
      "AdminCommentList": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/PostDetails"
          },
          "children": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AdminChildCommentList"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Children"
          },
          "parent": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdminParentCommentList"
              },
              {
                "type": "null"
              }
            ]
          },
          "visible": {
            "title": "Visible",
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "reviewed": {
            "title": "Reviewed",
            "type": "boolean"
          },
          "note": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "required": [
          "id",
          "author",
          "content",
          "post",
          "visible",
          "created_at",
          "updated_at",
          "reviewed"
        ],
        "title": "AdminCommentList",
        "type": "object"
      },
      "AdminParentCommentList": {
        "properties": {
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "author": {
            "$ref": "#/components/schemas/AuthorSummary"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "post": {
            "$ref": "#/components/schemas/PostDetails"
          },
          "parent": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdminParentCommentList"
              },
              {
                "type": "null"
              }
            ]
          },
          "visible": {
            "title": "Visible",
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "reviewed": {
            "title": "Reviewed",
            "type": "boolean"
          },
          "note": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          }
        },
        "required": [
          "id",
          "author",
          "content",
          "post",
          "visible",
          "created_at",
          "updated_at",
          "reviewed"
        ],
        "title": "AdminParentCommentList",
        "type": "object"
      },
      "PagedAdminCommentList": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/AdminCommentList"
            },
            "title": "Items",
            "type": "array"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": [
          "items",
          "count"
        ],
        "title": "PagedAdminCommentList",
        "type": "object"
      },
      "AdminCommentUpdate": {
        "properties": {
          "visible": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Visible"
          },
          "note": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Note"
          },
          "reviewed": {
            "title": "Reviewed",
            "type": "boolean"
          }
        },
        "required": [
          "reviewed"
        ],
        "title": "AdminCommentUpdate",
        "type": "object"
      },
      "CommentMutate": {
        "properties": {
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "title": "CommentMutate",
        "type": "object"
      },
      "Attachment": {
        "properties": {
          "url": {
            "description": "The URL of the attachment",
            "title": "Url",
            "type": "string"
          },
          "mime_type": {
            "description": "The MIME type of the attachment",
            "title": "Mime Type",
            "type": "string"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A name for the attachment",
            "title": "Title"
          },
          "size_in_bytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The size of the attachment in bytes",
            "title": "Size In Bytes"
          },
          "duration_in_seconds": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "The duration of the attachment in seconds, if it's audio or video",
            "title": "Duration In Seconds"
          }
        },
        "required": [
          "url",
          "mime_type"
        ],
        "title": "Attachment",
        "type": "object"
      },
      "FeedAuthorSchema": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url"
          },
          "avatar": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar"
          }
        },
        "title": "FeedAuthorSchema",
        "type": "object"
      },
      "FeedItem": {
        "example": {
          "content_text": "Hello World!",
          "date_published": "2023-04-20T14:22:00-07:00",
          "id": "2347259",
          "url": "https://example.org/2347259"
        },
        "properties": {
          "id": {
            "description": "Unique for that item for that feed over time. If an item is ever updated, the id should be unchanged. New items should never use a previously-used id.",
            "title": "Id",
            "type": "string"
          },
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of the resource described by the item. It's the permalink.",
            "title": "Url"
          },
          "external_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of a page elsewhere. This is especially useful for linkblogs.",
            "title": "External Url"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Plain text title of the item. Microblog items in particular may omit titles.",
            "title": "Title"
          },
          "content_html": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The HTML content of the item. If content_html includes any HTML, it MUST be encoded as valid HTML.",
            "title": "Content Html"
          },
          "content_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The plain text content of the item. Microblog items in particular may omit titles.",
            "title": "Content Text"
          },
          "summary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A plain text sentence or two describing the item. This might be presented in a timeline, for instance.",
            "title": "Summary"
          },
          "image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of the main image for the item. This image may also appear in the content_html.",
            "title": "Image"
          },
          "banner_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of an image to use as a banner. Some feed readers may choose to display this banner image at the top of the feed.",
            "title": "Banner Image"
          },
          "date_published": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The date the item was published in RFC 3339 format.",
            "title": "Date Published"
          },
          "date_modified": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The date the item was modified in RFC 3339 format.",
            "title": "Date Modified"
          },
          "authors": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AuthorSummary"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "The authors of the item.",
            "title": "Authors"
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "An array of tags or categories. These can be used to categorize items across feeds.",
            "title": "Tags"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The primary language for the item in the format specified in RFC 5646.",
            "title": "Language"
          },
          "attachments": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Attachment"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "An array of attachments, such as audio or video files.",
            "title": "Attachments"
          }
        },
        "required": [
          "id"
        ],
        "title": "FeedItem",
        "type": "object"
      },
      "Hub": {
        "properties": {
          "type": {
            "description": "The type of the hub.",
            "title": "Type",
            "type": "string"
          },
          "url": {
            "description": "The URL of the hub.",
            "title": "Url",
            "type": "string"
          }
        },
        "required": [
          "type",
          "url"
        ],
        "title": "Hub",
        "type": "object"
      },
      "JSONFeed": {
        "example": {
          "feed_url": "https://example.org/feed.json",
          "home_page_url": "https://example.org/",
          "items": [
            {
              "content_text": "This is a second item.",
              "id": "2",
              "url": "https://example.org/second-item"
            },
            {
              "content_html": "<p>Hello, world!</p>",
              "id": "1",
              "url": "https://example.org/initial-post"
            }
          ],
          "title": "My Example Feed",
          "version": "https://jsonfeed.org/version/1.1"
        },
        "properties": {
          "version": {
            "default": "https://jsonfeed.org/version/1.1",
            "description": "The URL of the version of the format the feed uses. Must be https://jsonfeed.org/version/1.1",
            "title": "Version",
            "type": "string"
          },
          "title": {
            "description": "The name of the feed, which will often correspond to the name of the website.",
            "title": "Title",
            "type": "string"
          },
          "home_page_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of the resource that the feed describes. This should be an HTML page that corresponds to the feed.",
            "title": "Home Page Url"
          },
          "feed_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of the feed, and serves as the unique identifier for the feed.",
            "title": "Feed Url"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Provides more detail, beyond the title, on what the feed is about.",
            "title": "Description"
          },
          "user_comment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "A description of the purpose of the feed. This is for the use of people looking at the raw JSON, and should be ignored by feed readers.",
            "title": "User Comment"
          },
          "next_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of a feed that provides the next n items, where n is determined by the publisher.",
            "title": "Next Url"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of an image for the feed suitable to be used in a timeline, much the way an avatar might be used. Should be square and relatively large \u2014 such as 512 x 512 pixels.",
            "title": "Icon"
          },
          "favicon": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The URL of an image for the feed suitable to be used in a source list. Should be square and relatively small, but not smaller than 64 x 64 pixels.",
            "title": "Favicon"
          },
          "authors": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FeedAuthorSchema"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "The authors of the feed.",
            "title": "Authors"
          },
          "language": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "The primary language for the feed in the format specified in RFC 5646.",
            "title": "Language"
          },
          "expired": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "description": "Says whether or not the feed is finished \u2014 that is, whether or not it will ever update again.",
            "title": "Expired"
          },
          "hubs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Hub"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "description": "Endpoints that can be used to subscribe to real-time notifications from the publisher of this feed.",
            "title": "Hubs"
          },
          "items": {
            "description": "The list of items in the feed. Must have at least one item.",
            "items": {
              "$ref": "#/components/schemas/FeedItem"
            },
            "title": "Items",
            "type": "array"
          }
        },
        "required": [
          "title",
          "items"
        ],
        "title": "JSONFeed",
        "type": "object"
      }
    },
    "securitySchemes": {
      "JWTAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "servers": []
}