/* tslint:disable */
/* eslint-disable */
/**
 * ooo-yay.com API
 * Resource-based API for ooo-yay.com.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TokenObtainPairInputSchema,
  TokenObtainPairOutputSchema,
  TokenRefreshInputSchema,
  TokenRefreshOutputSchema,
  TokenVerifyInputSchema,
} from '../models/index';
import {
    TokenObtainPairInputSchemaFromJSON,
    TokenObtainPairInputSchemaToJSON,
    TokenObtainPairOutputSchemaFromJSON,
    TokenObtainPairOutputSchemaToJSON,
    TokenRefreshInputSchemaFromJSON,
    TokenRefreshInputSchemaToJSON,
    TokenRefreshOutputSchemaFromJSON,
    TokenRefreshOutputSchemaToJSON,
    TokenVerifyInputSchemaFromJSON,
    TokenVerifyInputSchemaToJSON,
} from '../models/index';

export interface TokenObtainPairRequest {
    tokenObtainPairInputSchema: TokenObtainPairInputSchema;
}

export interface TokenRefreshRequest {
    tokenRefreshInputSchema: TokenRefreshInputSchema;
}

export interface TokenVerifyRequest {
    tokenVerifyInputSchema: TokenVerifyInputSchema;
}

/**
 * 
 */
export class TokenApi extends runtime.BaseAPI {

    /**
     * Obtain Token
     */
    async tokenObtainPairRaw(requestParameters: TokenObtainPairRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenObtainPairOutputSchema>> {
        if (requestParameters['tokenObtainPairInputSchema'] == null) {
            throw new runtime.RequiredError(
                'tokenObtainPairInputSchema',
                'Required parameter "tokenObtainPairInputSchema" was null or undefined when calling tokenObtainPair().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/pair`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenObtainPairInputSchemaToJSON(requestParameters['tokenObtainPairInputSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenObtainPairOutputSchemaFromJSON(jsonValue));
    }

    /**
     * Obtain Token
     */
    async tokenObtainPair(requestParameters: TokenObtainPairRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenObtainPairOutputSchema> {
        const response = await this.tokenObtainPairRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh Token
     */
    async tokenRefreshRaw(requestParameters: TokenRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRefreshOutputSchema>> {
        if (requestParameters['tokenRefreshInputSchema'] == null) {
            throw new runtime.RequiredError(
                'tokenRefreshInputSchema',
                'Required parameter "tokenRefreshInputSchema" was null or undefined when calling tokenRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshInputSchemaToJSON(requestParameters['tokenRefreshInputSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRefreshOutputSchemaFromJSON(jsonValue));
    }

    /**
     * Refresh Token
     */
    async tokenRefresh(requestParameters: TokenRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRefreshOutputSchema> {
        const response = await this.tokenRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify Token
     */
    async tokenVerifyRaw(requestParameters: TokenVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['tokenVerifyInputSchema'] == null) {
            throw new runtime.RequiredError(
                'tokenVerifyInputSchema',
                'Required parameter "tokenVerifyInputSchema" was null or undefined when calling tokenVerify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenVerifyInputSchemaToJSON(requestParameters['tokenVerifyInputSchema']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Verify Token
     */
    async tokenVerify(requestParameters: TokenVerifyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.tokenVerifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
